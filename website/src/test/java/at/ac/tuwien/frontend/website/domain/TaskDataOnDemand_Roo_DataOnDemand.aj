// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.ac.tuwien.frontend.website.domain;

import at.ac.tuwien.frontend.website.domain.Task;
import at.ac.tuwien.frontend.website.domain.TaskDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect TaskDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TaskDataOnDemand: @Component;
    
    private Random TaskDataOnDemand.rnd = new SecureRandom();
    
    private List<Task> TaskDataOnDemand.data;
    
    public Task TaskDataOnDemand.getNewTransientTask(int index) {
        Task obj = new Task();
        setDescription(obj, index);
        setKeyword(obj, index);
        setSentiment(obj, index);
        setTaskName(obj, index);
        return obj;
    }
    
    public void TaskDataOnDemand.setDescription(Task obj, int index) {
        String description = "description_" + index;
        if (description.length() > 80) {
            description = description.substring(0, 80);
        }
        obj.setDescription(description);
    }
    
    public void TaskDataOnDemand.setKeyword(Task obj, int index) {
        String keyword = "keyword_" + index;
        if (keyword.length() > 30) {
            keyword = keyword.substring(0, 30);
        }
        obj.setKeyword(keyword);
    }
    
    public void TaskDataOnDemand.setSentiment(Task obj, int index) {
        Double sentiment = new Integer(index).doubleValue();
        obj.setSentiment(sentiment);
    }
    
    public void TaskDataOnDemand.setTaskName(Task obj, int index) {
        String taskName = "taskName_" + index;
        if (taskName.length() > 30) {
            taskName = taskName.substring(0, 30);
        }
        obj.setTaskName(taskName);
    }
    
    public Task TaskDataOnDemand.getSpecificTask(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Task obj = data.get(index);
        Long id = obj.getId();
        return Task.findTask(id);
    }
    
    public Task TaskDataOnDemand.getRandomTask() {
        init();
        Task obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Task.findTask(id);
    }
    
    public boolean TaskDataOnDemand.modifyTask(Task obj) {
        return false;
    }
    
    public void TaskDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Task.findTaskEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Task' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Task>();
        for (int i = 0; i < 10; i++) {
            Task obj = getNewTransientTask(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
