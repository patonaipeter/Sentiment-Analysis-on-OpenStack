// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.ac.tuwien.frontend.website.domain;

import at.ac.tuwien.frontend.website.domain.CloudUser;
import at.ac.tuwien.frontend.website.domain.CloudUserDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect CloudUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CloudUserDataOnDemand: @Component;
    
    private Random CloudUserDataOnDemand.rnd = new SecureRandom();
    
    private List<CloudUser> CloudUserDataOnDemand.data;
    
    public CloudUser CloudUserDataOnDemand.getNewTransientCloudUser(int index) {
        CloudUser obj = new CloudUser();
        setCompany(obj, index);
        setEmail(obj, index);
        setPassword(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void CloudUserDataOnDemand.setCompany(CloudUser obj, int index) {
        String company = "company_" + index;
        if (company.length() > 30) {
            company = company.substring(0, 30);
        }
        obj.setCompany(company);
    }
    
    public void CloudUserDataOnDemand.setEmail(CloudUser obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 30) {
            email = email.substring(0, 30);
        }
        obj.setEmail(email);
    }
    
    public void CloudUserDataOnDemand.setPassword(CloudUser obj, int index) {
        String password = "password_" + index;
        if (password.length() > 30) {
            password = password.substring(0, 30);
        }
        obj.setPassword(password);
    }
    
    public void CloudUserDataOnDemand.setUserName(CloudUser obj, int index) {
        String userName = "userName_" + index;
        if (userName.length() > 30) {
            userName = userName.substring(0, 30);
        }
        obj.setUserName(userName);
    }
    
    public CloudUser CloudUserDataOnDemand.getSpecificCloudUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CloudUser obj = data.get(index);
        Long id = obj.getId();
        return CloudUser.findCloudUser(id);
    }
    
    public CloudUser CloudUserDataOnDemand.getRandomCloudUser() {
        init();
        CloudUser obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return CloudUser.findCloudUser(id);
    }
    
    public boolean CloudUserDataOnDemand.modifyCloudUser(CloudUser obj) {
        return false;
    }
    
    public void CloudUserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = CloudUser.findCloudUserEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CloudUser' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CloudUser>();
        for (int i = 0; i < 10; i++) {
            CloudUser obj = getNewTransientCloudUser(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
